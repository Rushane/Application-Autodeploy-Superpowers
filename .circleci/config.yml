version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.3.0
  slack: circleci/slack@4.1

parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: | 
            aws s3 rb s3://proj3-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name  proj3-backend-<< parameters.workflow-id >>
            aws cloudformation delete-stack --stack-name  proj3-frontend-<< parameters.workflow-id >>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "MIGRATION_OK" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            if(( migrations==1 )); 
            then
              cd ~/project/backend   
              npm install       
              npm run migrations:revert
            fi
executors:
  node:
    docker:
      - image: circleci/node:13.8.0
  python:
    docker:
      - image: python:3.7-alpine3.11
  aws:
    docker:
      - image: amazon/aws-cli

jobs:

  build-frontend:
    executor: node
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [v5-frontendCache]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
            npm install oauth-sign
      - run:
          name: Compile the code
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: v5-frontendCache

  build-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [v5-backend-build]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - persist_to_workspace:
          root: .
          paths: [backend/node_modules]
      - run:
          name: Compile the code
          command: |
            cd backend
            npm run build
      - persist_to_workspace:
          root: .
          paths: [backend/dist]
      - save_cache:
          paths: [backend/node_modules]
          key: v5-backend-build
      - save_cache:
          paths: [backend/dist]
          key: v4-backend-dist  
     
  test-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: ["v5-frontendCache"]
      - run:
          name: Install Frontend deps
          command: |
            cd frontend
            npm install
            npm install oauth-sign
      - run:
          name: Test code
          command: |
            cd frontend
            npm run test
  test-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [v5-backend-build]
      - run:
          name: Install Backend deps
          command: |
            cd backend
            npm install
      - run:
          name: Test code
          command: |
            cd backend
            npm run test
      - slack/notify:
          channel: '#devops-project-3-autumation-super-power'
          event: fail
          template: basic_fail_1       
            
  scan-frontend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: ["v5-frontendCache"]
      - run:
          name: Install Frontend deps
          command: |
            cd frontend
            npm install
            npm install oauth-sign
      - run:
          name: Scan Frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
 
  scan-backend:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys: [v5-backend-build]
      - run:
          name: Install Backend deps
          command: |
            cd backend
            npm install
      - run:
          name: Scan Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force         
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - aws-cli/setup      
      - run: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=proj3-backend-${CIRCLE_WORKFLOW_ID} \
              --stack-name proj3-backend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Fetch and Save Backend URL
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=proj3-backend-${CIRCLE_WORKFLOW_ID}" \
              --output text)
            echo $BACKEND_IP
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "http://$BACKEND_IP:3030" https://api.memstash.io/values/BACKEND_URL
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=proj3-frontend-${CIRCLE_WORKFLOW_ID} \
              --stack-name proj3-frontend-${CIRCLE_WORKFLOW_ID} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          working_directory: ./.circleci/ansible
          command: |
            aws ec2 describe-instances \
                 --query 'Reservations[*].Instances[*].PublicIpAddress' \
                 --filters "Name=tag:project,Values=proj3-backend-${CIRCLE_WORKFLOW_ID}" \
                 --output text > inventory.txt
            cat inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment
                 
  configure-infrastructure:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [6a:e6:6e:69:cc:2d:87:cc:be:34:db:c1:d3:2a:f8:fe]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update tar gzip ansible curl
            pip install awscli
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .                 
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            npm install
            #npm run build
            npm run migrations > migration_status
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep -q "has been executed successfully" migration_status
            then
              echo "DB migration was successful, will update memstash..."
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "MIGRATION_OK" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
              echo "DB migration failed, please verify setup! Probably the database already exists. Verify setup!"
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "MIGRATION_FAILED" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            fi
            echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"     
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Get backend url
          command: |
            export API_URL=$(curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo $API_URL
      - run:
          name: Deploy frontend objects
          working_directory: ./frontend
          command: |
            export API_URL=$(curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo $API_URL
            npm install 
            npm install oauth2
            npm install webpack
            npm run build
            aws s3 cp ./dist "s3://proj3-${CIRCLE_WORKFLOW_ID}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - frontend/dist
      

#- destroy-environment
 #     - revert-migrations

  deploy-backend:
    executor: python
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [6a:e6:6e:69:cc:2d:87:cc:be:34:db:c1:d3:2a:f8:fe]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            cd /tmp
            apk add --update ansible curl rsync openssh nodejs npm tar gzip
            pip install awscli
      - restore_cache:
          keys: ["v5-backend-dist", "v5-backend-build"]
      - run:
          name: Compress dist Files
          command: |
            cd /home
            tar czf backend.tar.gz -P /home/circleci/project/backend
      - run:
          name: Deploy backend
          working_directory: ./.circleci/ansible
          command: |
            # your code here
            ls -al && pwd
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -vv
      - run:
          name: Install AWS CLI for rollback
          when: on_fail
          command: |
            apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
      #- destroy-environment
      #- revert-migrations

  smoke-test:
    executor: python
    steps:
      - checkout    
      - attach_workspace:
          at: . 
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Get backend url
          working_directory: ./backend
          command: |
            BACKEND_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo ${BACKEND_URL}
      - run:
          name: Backend smoke test.
          working_directory: ./backend
          command: |
            # test backend reachability
            BACKEND_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/BACKEND_URL)
            echo ${BACKEND_URL}
            curl -s "${BACKEND_URL}/api/status"       
      - run:
          name: Frontend smoke test.
          working_directory: ./frontend
          command: |
            # test frontend reachability
            S3_URL="http://proj3-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com/index.html"
            if curl -s ${S3_URL} | grep -q "Welcome"
            then
              return 0
            else
              return 1
            fi
      #- destroy-environment
      #- revert-migrations
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # install job req.
            yum install -y nodejs curl
      - run:
          name: Store old WorkflowID
          command: |
            OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "$OldWorkflowID" https://api.memstash.io/values/OldWorkflowID
            echo $OldWorkflowID > OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution with new S3 bucket and passed parameter
          command: |
            # your code here
            OldWorkflowID=$(cat OldWorkflowID.txt)
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --tags project=proj3-cloudfront-${CIRCLE_WORKFLOW_ID} \
              --stack-name proj3-cloudfront-${OldWorkflowID} \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID}"
              
      #- destroy-environment
      #- revert-migrations

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get the old stack workflow id
          command: |
            export OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/OldWorkflowID)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo $OldWorkflowID > OldWorkflowID.txt
      - run:
          name: Remove old stacks and files
          command: |
            OldWorkflowID=$(cat OldWorkflowID.txt)
            aws cloudformation list-stacks --stack-status "CREATE_COMPLETE" > current_stacks
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
              aws s3 rm "s3://proj3-${OldWorkflowID}" --recursive
              if grep -q "proj3-backend-${OldWorkflowID}" current_stacks
              then
                aws cloudformation delete-stack --stack-name "proj3-backend-${OldWorkflowID}"
              fi
              if grep -q "proj3-frontend-${OldWorkflowID}" current_stacks
              then
                aws cloudformation delete-stack --stack-name "proj3-frontend-${OldWorkflowID}"
              fi
            fi  
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [configure-infrastructure]
      - deploy-backend:
          requires: [deploy-infrastructure]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

